name: Get Codeartifact info

on:
  workflow_call:
    inputs:
      is-production:
        type: boolean
        description: Whether to retrieve tokens from dev or production repository
        default: false
        required: false
      token-duration:
        type: string
        description: Option to set token's duration until expiration
        default: 3600
        required: false
      aws-role-arn:
        type: string
        description: The arn of the role which is to be used for publishing
        required: false
        default: arn:aws:iam::102867326982:role/GithubDevCDRole
    secrets:
      GPG_CODEARTIFACT_TOKEN_PASSPHRASE:
        required: true
    outputs:
      encrypted-token:
        description: The encrypted codeartifact token
        value: ${{ jobs.get-codeartifact-info.outputs.encrypted-token }}
      codeartifact-repository:
        description: The repository of the codeartifact
        value: ${{ jobs.get-codeartifact-info.outputs.codeartifact-repository }}
env:
  AWS_DOMAIN_OWNER: 719141923726
  AWS_REGION: us-east-1
  DEV_REPOSITORY: dev-orfium-packages-repository
  DEV_DOMAIN: dev-orfium-packages
  PROD_REPOSITORY: prod-orfium-packages-repository
  PROD_DOMAIN: prod-orfium-packages

jobs:
  get-codeartifact-info:
    runs-on: ubuntu-latest
    outputs:
      encrypted-token: ${{ steps.get-codeartifact-token.outputs.CODEARTIFACT_TOKEN_ENCRYPTED}}
      codeartifact-repository: ${{steps.get-codeartifact-token.outputs.CODEARTIFACT_REPOSITORY}}
    steps:
      - name: Check secrets
        env:
          gpg_code_artifact_token_pass: ${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}
        if: ${{ env.gpg_code_artifact_token_pass == '' }}
        run: |
          echo "Secret GPG_CODEARTIFACT_TOKEN_PASSPHRASE has not been defined; Please add it to Repository and Dependabot secrets."
          exit 1
      - name: Set Dev Envs
        if: ${{ inputs.is-production == false }}
        run: |
          echo "AWS_REPOSITORY=$DEV_REPOSITORY" >> "$GITHUB_ENV"
          echo "AWS_DOMAIN=$DEV_DOMAIN" >> "$GITHUB_ENV"
      - name: Set Prod Envs
        if: ${{ inputs.is-production == true }}
        run: |
          echo "AWS_REPOSITORY=$PROD_REPOSITORY" >> "$GITHUB_ENV"
          echo "AWS_DOMAIN=$PROD_DOMAIN" >> "$GITHUB_ENV"
      - name: Configure AWS Credentials.
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: ${{ inputs.aws-role-arn }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false
      - name: Get Codeartifact token and repository
        id: get-codeartifact-token
        run: |
          CODEARTIFACT_LOCAL_REPOSITORY=$(aws codeartifact get-repository-endpoint --domain ${{ env.AWS_DOMAIN }} --domain-owner ${{ env.AWS_DOMAIN_OWNER }} --repository ${{ env.AWS_REPOSITORY }} --format pypi --query repositoryEndpoint --output text)
          CODEARTIFACT_LOCAL_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ env.AWS_DOMAIN }} --domain-owner ${{ env.AWS_DOMAIN_OWNER }} --duration-seconds ${{ inputs.token-duration }} --query authorizationToken --output text)
          echo "::add-mask::$CODEARTIFACT_LOCAL_TOKEN"
          echo "CODEARTIFACT_REPOSITORY=$CODEARTIFACT_LOCAL_REPOSITORY" >> "$GITHUB_OUTPUT"
          encrypted_token=$(gpg --symmetric --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "$CODEARTIFACT_LOCAL_TOKEN") | base64 -w0)
          echo "CODEARTIFACT_TOKEN_ENCRYPTED=$encrypted_token" >> "$GITHUB_OUTPUT"
