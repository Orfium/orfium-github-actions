on:
  workflow_call:
    inputs:
      BUILDX_LOCAL_CACHE_DIR:
        required: false
        type: string
      API_TEST_RESULTS_PATH:
        required: false
        type: string
      UI_TEST_RESULTS_PATH:
        required: false
        type: string
      RUN_UI_TESTS:
        required: false
        type: boolean
        default: false
      RUN_API_TESTS:
        required: false
        type: boolean
        default: false
      codeartifact_encrypted_token_dev:
        required: false
        type: string
      codeartifact_encrypted_token_prod:
        required: false
        type: string
      ECR_LOGIN_FLAG:
        required: false
        type: boolean
        default: false
      ECR_REGISTRY:
        required: false
        type: string
      ECR_REGION:
        required: false
        type: string
      AWS_CD_ROLE:
        required: false
        type: string
    secrets:
      GPG_CODEARTIFACT_TOKEN_PASSPHRASE:
        required: false
    outputs:
      test-results-artifact-id:
        description: The ID of the uploaded test results artifact
        value: ${{ jobs.end-to-end-tests.outputs.test-results-artifact-id }}
      test-results-artifact-url:
        description: The URL of the uploaded test results artifact
        value: ${{ jobs.end-to-end-tests.outputs.test-results-artifact-url }}

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  end-to-end-tests:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      checks: write
    outputs:
      test-results-artifact-id: ${{ steps.e2e-test-results-upload.outputs.artifact-id }}
      test-results-artifact-url: ${{ steps.e2e-test-results-upload.outputs.artifact-url }}

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master

      - name: Set up Local Cache for Docker layers
        if: "${{ inputs.BUILDX_LOCAL_CACHE_DIR != '' }}"
        uses: actions/cache@v4
        with:
          path: ${{ inputs.BUILDX_LOCAL_CACHE_DIR }}
          key: ${{ runner.os }}-buildx-local-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-local-

      - name: Decrypt Codeartifact dev token
        if: "${{ inputs.codeartifact_encrypted_token_dev != '' }}"
        run: |
          token=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "${{ inputs.codeartifact_encrypted_token_dev }}" | base64 --decode))
          echo "::add-mask::$token"
          echo "CODEARTIFACT_TOKEN_DEV=$token" >> "$GITHUB_ENV"

      - name: Decrypt Codeartifact prod token
        if: "${{ inputs.codeartifact_encrypted_token_prod != '' }}"
        run: |
          token=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "${{ inputs.codeartifact_encrypted_token_prod }}" | base64 --decode))
          echo "::add-mask::$token"
          echo "CODEARTIFACT_TOKEN_PROD=$token" >> "$GITHUB_ENV"

      - name: Build local image from Cache
        if: "${{ inputs.BUILDX_LOCAL_CACHE_DIR != '' }}"
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          target: local
          tags: ${{ github.event.repository.name }}
          cache-from: type=local,src=${{ inputs.BUILDX_LOCAL_CACHE_DIR }}
          secrets: |
            CODEARTIFACT_TOKEN_DEV=${{ env.CODEARTIFACT_TOKEN_DEV }}
            CODEARTIFACT_TOKEN_PROD=${{ env.CODEARTIFACT_TOKEN_PROD }}

      - name: Build local image
        if: "${{ inputs.BUILDX_LOCAL_CACHE_DIR == '' }}"
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          target: local
          tags: ${{ github.event.repository.name }}
          secrets: |
            CODEARTIFACT_TOKEN_DEV=${{ env.CODEARTIFACT_TOKEN_DEV }}
            CODEARTIFACT_TOKEN_PROD=${{ env.CODEARTIFACT_TOKEN_PROD }}

      - name: Configure AWS credentials
        id: e2e-aws-configure
        if: ${{ inputs.ECR_LOGIN_FLAG }}
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ inputs.AWS_CD_ROLE }}
          aws-region: ${{ inputs.ECR_REGION }}

      - name: Login to ECR
        id: e2e-ecr-login
        if: ${{ inputs.ECR_LOGIN_FLAG }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.ECR_REGISTRY }}

      - name: Run End to End API tests
        id: e2e-api-tests
        if: ${{ inputs.RUN_API_TESTS }}
        run: make e2e-api-tests

      - name: Run End to End UI tests
        id: e2e-ui-tests
        if: ${{ inputs.RUN_UI_TESTS }}
        run: make e2e-ui-tests
      
      # Using the same name for both API and UI test results will result in the second upload failing.
      # Here, it's ok because we'll never run both tests at the same time.
      - name: Upload API test results as artifacts
        id: e2e-api-test-results-upload
        if: ${{ inputs.RUN_API_TESTS }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            ${{ github.workspace }}/${{ inputs.API_TEST_RESULTS_PATH }}
          if-no-files-found: warn # default
          retention-days: 90 # default

      - name: Upload UI test results as artifacts
        id: e2e-ui-test-results-upload
        if: ${{ inputs.RUN_UI_TESTS }}
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            ${{ github.workspace }}/${{ inputs.UI_TEST_RESULTS_PATH }}
          if-no-files-found: warn # default
          retention-days: 90 # default

      - name: visualise-e2e-test-reports
        # We leverage the fact that GitHub Actions sets the outcome to null for steps that have not run
        if: always() && (steps.e2e-api-tests.outcome != null || steps.e2e-ui-tests.outcome != null)
        uses: dorny/test-reporter@v1
        with:
          name: E2E Test Reports
          path: ${{ github.workspace }}/${{ inputs.API_TEST_RESULTS_PATH }},${{ github.workspace }}/${{ inputs.UI_TEST_RESULTS_PATH }} # Comma separated list of paths to test results, all matched result files must be of the same format
          reporter: java-junit # the proper reporter for test results that are generated with JUnit-XML format. We must make this dynamic if we want to support other formats.
          fail-on-error: false # we want the action to run even if the tests fail. If this is set to true, we won't have reports if a test fails

      - name: Tear down the Stack
        run: make down-volumes
