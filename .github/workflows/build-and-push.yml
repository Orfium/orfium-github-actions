on:
  workflow_call:
    inputs:
      infra_folder_path:
        required: false
        type: string
      codeartifact_encrypted_token_dev:
        required: false
        type: string
      codeartifact_encrypted_token_prod:
        required: false
        type: string
    secrets:
      GPG_CODEARTIFACT_TOKEN_PASSPHRASE:
        required: false
    outputs:
      ecr-image:
        description: "The application's image" 
        value: ${{ jobs.build-and-push.outputs.ecr-image }}
      env-id:
        description: "The Environment Identifier" 
        value: ${{ jobs.build-and-push.outputs.env-id }}
      env-suffix:
        description: "The Environment Identifier" 
        value: ${{ jobs.build-and-push.outputs.env-suffix }}
      init-deployment:
        description: "The flag defining is it's an initial deployment or not" 
        value: ${{ jobs.build-and-push.outputs.init-deployment }}

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  set-environment-variables:
    runs-on: ubuntu-latest
    outputs:
      infra_folder_path: ${{ steps.infra-folder-path.outputs.infra_folder_path }}
    steps:
      - name: Check infra folder path
        id: infra-folder-path
        run: |
          FOLDER_PATH=${{ inputs.infra_folder_path }}
          if [[ -z $FOLDER_PATH ]]; then
            FOLDER_PATH=infra/
          else
            FOLDER_PATH=${{ inputs.infra_folder_path }}/
          fi
          echo "infra_folder_path=$FOLDER_PATH" >> "$GITHUB_OUTPUT"

  build-and-push:
    needs:
      - set-environment-variables
    runs-on: ubuntu-latest
    outputs:
      ecr-image: ${{ steps.ecr-image-out.outputs.ECR_IMAGE }}
      env-id: ${{ steps.set-environment.outputs.ENVIRONMENT_ID }}
      env-suffix: ${{ steps.set-environment.outputs.ENVIRONMENT_SUFFIX }}
      init-deployment: ${{ steps.check-init-deploy.outputs.INITIAL_DEPLOYMENT }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # # We are overriding the default buildkit version being used by Buildx. We need buildkit >= 12.0 and currently BuildX
        # supports v0.11.6 https://github.com/docker/buildx/blob/b8739d74417f86aa8fc9aafb830a8ba656bdef0e/Dockerfile#L9.
        # We should for any updates on buildx and on the setup-buildx-action itself.
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
      - name: Set deployment env
        id: set-environment
        run: |
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            echo "This is a review environment"
            cat ${{ needs.set-environment-variables.outputs.infra_folder_path }}environments/review.env >> "$GITHUB_ENV"
            echo "ENVIRONMENT_ID=review" >> "$GITHUB_OUTPUT"
            echo "ENVIRONMENT_SUFFIX=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          else
            echo "This is a production environment"
            cat ${{ needs.set-environment-variables.outputs.infra_folder_path }}environments/production.env >> "$GITHUB_ENV"
            echo "ENVIRONMENT_ID=production" >> "$GITHUB_OUTPUT"
            echo "ENVIRONMENT_SUFFIX=" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Configure AWS Credentials
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.0.0
        with:
          role-to-assume: ${{ env.AWS_CD_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false
      
      - name: Check if it's initial deployment
        id: check-init-deploy
        run: |
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            echo "Checking if it's an initial deployment for ${{ env.ProductName }}-${{ github.event.pull_request.number }} stack"
            if aws cloudformation describe-stacks --stack-name ${{ env.ProductName }}-${{ github.event.pull_request.number }}; then
              echo "Deployment exists"
              echo "INITIAL_DEPLOYMENT=false" >> "$GITHUB_OUTPUT"
            else
              echo "This is an initial deployment"
              echo "INITIAL_DEPLOYMENT=true" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "Checking if it's an initial deployment for ${{ env.ProductName }} stack"
            if aws cloudformation describe-stacks --stack-name ${{ env.ProductName }}; then
              echo "Deployment exists"
              echo "INITIAL_DEPLOYMENT=false" >> "$GITHUB_OUTPUT"
            else
              echo "This is an initial deployment"
              echo "INITIAL_DEPLOYMENT=true" >> "$GITHUB_OUTPUT"
            fi
          fi
      
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: "${{ env.ECR_REGISTRY }}"

      - name: Decrypt Codeartifact dev token
        if: "${{ inputs.codeartifact_encrypted_token_dev != '' }}"
        run: |
          token=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "${{ inputs.codeartifact_encrypted_token_dev }}" | base64 --decode))
          echo "::add-mask::$token"
          echo "CODEARTIFACT_TOKEN_DEV=$token" >> "$GITHUB_ENV"

      - name: Decrypt Codeartifact prod token
        if: "${{ inputs.codeartifact_encrypted_token_prod != '' }}"
        run: |
          token=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "${{ inputs.codeartifact_encrypted_token_prod }}" | base64 --decode))
          echo "::add-mask::$token"
          echo "CODEARTIFACT_TOKEN_PROD=$token" >> "$GITHUB_ENV"
      
      - name: Build And Push Docker Image
        uses: docker/build-push-action@v5
        if: ${{ (github.event_name != 'pull_request') }}
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}:${{ github.sha }}
          cache-from: ${{ env.ECR_REGISTRY }}:stable
          cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}:stable,mode=max,image-manifest=true,oci-mediatypes=true
          target: production
          secrets: |
            CODEARTIFACT_TOKEN_DEV=${{ env.CODEARTIFACT_TOKEN_DEV }}
            CODEARTIFACT_TOKEN_PROD=${{ env.CODEARTIFACT_TOKEN_PROD }}
          
      - name: Build And Push Docker Image PR
        uses: docker/build-push-action@v5
        if: ${{ (github.event_name == 'pull_request') }}
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}:${{ github.sha }}
          cache-from: ${{ env.ECR_REGISTRY }}:latest
          cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}:latest,mode=max,image-manifest=true,oci-mediatypes=true
          target: production
          secrets: |
            CODEARTIFACT_TOKEN_DEV=${{ env.CODEARTIFACT_TOKEN_DEV }}
            CODEARTIFACT_TOKEN_PROD=${{ env.CODEARTIFACT_TOKEN_PROD }}
      
      - name: Output ECR image
        id: ecr-image-out
        shell: bash
        run: |
          ECR_IMAGE=${{ env.ECR_REGISTRY }}:${{ github.sha }}
          echo "ECR_IMAGE=$ECR_IMAGE" >> "$GITHUB_OUTPUT"
          echo "The ECR image arn is $ECR_IMAGE"
