name: twine publisher to code artifact

on:
  workflow_call:
    inputs:
      domain:
        type: string
        description: The domain of the repository you want to use.
        default: prod-orfium-packages
        required: false
      domain-owner:
        type: string
        description: The owner of the repository you want to use.
        default: 719141923726
        required: false
      repository:
        type: string
        description: The repository you want to use.
        default: prod-orfium-packages-repository
        required: false

jobs:
  components:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4
      - name: Set up python {{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Install dependencies.
        run: |
          python -m pip install --upgrade pip
          pip install wheel build
          pip install twine
      - name: Build a binary wheel and a source tarball
        run: |
          python -m build --sdist --wheel --outdir dist/ .
      - name: Configure AWS Credentials.
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::719141923726:role/GithubToolsProdCodeArtifactAdminRole
          aws-region: us-east-1
          mask-aws-account-id: false
      - name: Configure dynamic twine variables.
        id: configure-twine-creds
        run: |
          echo "TWINE_PASSWORD=$(aws codeartifact get-authorization-token --domain ${{ inputs.domain }} --domain-owner ${{ inputs.domain-owner }} --duration-seconds 900 --query authorizationToken --output text)" >> "$GITHUB_ENV"
          echo "TWINE_REPOSITORY_URL=$(aws codeartifact get-repository-endpoint --domain ${{ inputs.domain }} --domain-owner ${{ inputs.domain-owner }} --repository ${{ inputs.repository }} --format pypi --query repositoryEndpoint --output text)" >> "$GITHUB_ENV"
      - name: Publish package to Orfium PyPI cloud server
        env:
          TWINE_USERNAME: aws
        run: |
          twine upload dist/*
