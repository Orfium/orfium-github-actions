on:
  workflow_call:
    inputs:
      BUILDX_LOCAL_CACHE_DIR:
        required: false
        type: string
      codeartifact_encrypted_token_dev:
        type: string
        required: false
      codeartifact_encrypted_token_prod:
        type: string
        required: false
      infra_folder_path:
        required: false
        type: string
        default: infra/
    secrets:
      GPG_CODEARTIFACT_TOKEN_PASSPHRASE:
        required: false

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  set-environment-variables:
    runs-on: ubuntu-latest
    outputs:
      infra_folder_path: ${{ steps.infra-folder-path.outputs.infra_folder_path }}
    steps:
      - name: Check infra folder path
        id: infra-folder-path
        run: |
          FOLDER_PATH=${{ inputs.infra_folder_path }}
          echo "infra_folder_path=$FOLDER_PATH" >> "$GITHUB_OUTPUT"
          
  build-local-images:
    needs:
      - set-environment-variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
      - name: Set deployment env
        id: set-environment
        run: |
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            echo "This is a review environment"
            cat ${{ needs.set-environment-variables.outputs.infra_folder_path }}environments/review.env >> "$GITHUB_ENV"
            echo "ENVIRONMENT_ID=review" >> "$GITHUB_OUTPUT"
            echo "ENVIRONMENT_SUFFIX=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          else
            echo "This is a production environment"
            cat ${{ needs.set-environment-variables.outputs.infra_folder_path }}environments/production.env >> "$GITHUB_ENV"
            echo "ENVIRONMENT_ID=production" >> "$GITHUB_OUTPUT"
            echo "ENVIRONMENT_SUFFIX=" >> "$GITHUB_OUTPUT"
          fi
      - name: Configure AWS Credentials
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ env.AWS_CD_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: "${{ env.ECR_REGISTRY }}"
      - name: Set up Local Cache for Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ inputs.BUILDX_LOCAL_CACHE_DIR }}
          key: ${{ runner.os }}-buildx-local-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-local-
      - name: Decrypt Codeartifact dev token
        if: "${{ inputs.codeartifact_encrypted_token_dev != '' }}"
        run: |
          token=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "${{ inputs.codeartifact_encrypted_token_dev }}" | base64 --decode))
          echo "::add-mask::$token"
          echo "CODEARTIFACT_TOKEN_DEV=$token" >> "$GITHUB_ENV"
      - name: Decrypt Codeartifact prod token
        if: "${{ inputs.codeartifact_encrypted_token_prod != '' }}"
        run: |
          token=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "${{ inputs.codeartifact_encrypted_token_prod }}" | base64 --decode))
          echo "::add-mask::$token"
          echo "CODEARTIFACT_TOKEN_PROD=$token" >> "$GITHUB_ENV"
      - name: Build local image from Cache
        if: "${{ inputs.BUILDX_LOCAL_CACHE_DIR != '' }}"
        uses: docker/build-push-action@v5
        with:
          push: false
          target: local
          tags: ${{ github.event.repository.name }}
          cache-from: ${{ env.ECR_REGISTRY }}:dev
          cache-to: |
            type=registry,ref=${{ env.ECR_REGISTRY }}:dev,mode=max,image-manifest=true,oci-mediatypes=true
            type=local,dest=${{ inputs.BUILDX_LOCAL_CACHE_DIR }}-new,mode=max
          secrets: |
            "CODEARTIFACT_TOKEN_DEV=${{ env.CODEARTIFACT_TOKEN_DEV }}"
            "CODEARTIFACT_TOKEN_PROD=${{ env.CODEARTIFACT_TOKEN_PROD }}"
      - name: Build local image
        if: "${{ inputs.BUILDX_LOCAL_CACHE_DIR == '' }}"
        uses: docker/build-push-action@v5
        with:
          push: false
          target: local
          tags: ${{ github.event.repository.name }}
          cache-from: ${{ env.ECR_REGISTRY }}:dev
          cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}:dev,mode=max,image-manifest=true,oci-mediatypes=true
          secrets: |
            "CODEARTIFACT_TOKEN_DEV=${{ env.CODEARTIFACT_TOKEN_DEV }}"
            "CODEARTIFACT_TOKEN_PROD=${{ env.CODEARTIFACT_TOKEN_PROD }}"
      - name: Refresh Local cache
        if: "${{ inputs.BUILDX_LOCAL_CACHE_DIR != '' }}"
        run: |
          rm -rf ${{ inputs.BUILDX_LOCAL_CACHE_DIR }}
          mv ${{ inputs.BUILDX_LOCAL_CACHE_DIR }}-new ${{ inputs.BUILDX_LOCAL_CACHE_DIR }}
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
