name: Deployment

on:
  workflow_call:
    inputs:
      python_version:
        required: false
        default: '3.10'
        type: string
      environment_id:
        required: true
        type: string
      environment_suffix:
        required: false
        type: string
      dynamic_cf_parameters:
        required: false
        type: string
      main_cf_template:
        required: false
        type: string
        default: infra/aws-deploy.yml
      infra_folder_path:
        required: false
        type: string
        default: infra

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Set up Python "${{ inputs.python_version }}"
        id: python-setup
        uses: actions/setup-python@v5
        with:
          python-version: "${{ inputs.python_version }}"
      
      - name: Extract Deployment Variables to Output
        id: extract-deployment-envs
        run: |
          set -o allexport

          if [ -f "${{ inputs.infra_folder_path }}/environments/common.env" ]; then
            source ${{ inputs.infra_folder_path }}/environments/common.env
          else
            echo "No common.env file has been found. Disregarding it."
          fi
          source ${{ inputs.infra_folder_path }}/environments/${{ inputs.environment_id }}.env

          if [[ -z $ProductName || -z $AWS_REGION || -z $AWS_ACCOUNT_ID || -z $AWS_ACCOUNT_NAME || -z $AWS_CD_ROLE || -z $AWS_CF_ROLE ]]; then
            echo -e "All necessary parameters must be defined, which are:\n- ProductName\n- AWS_REGION\n- AWS_ACCOUNT_ID\n- AWS_ACCOUNT_NAME\n- AWS_CD_ROLE\n- AWS_CF_ROLE"
            exit 1
          else
            echo "All necessary parameters are defined"
          fi

          # shellcheck disable=SC2129
          echo "ProductName=$ProductName" >> "$GITHUB_OUTPUT"
          echo "AWS_REGION=$AWS_REGION" >> "$GITHUB_OUTPUT"
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          echo "AWS_ACCOUNT_NAME=$AWS_ACCOUNT_NAME" >> "$GITHUB_OUTPUT"
          echo "AWS_CD_ROLE=$AWS_CD_ROLE" >> "$GITHUB_OUTPUT"
          echo "AWS_CF_ROLE=$AWS_CF_ROLE" >> "$GITHUB_OUTPUT"
          
      - name: Configure AWS Credentials
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: ${{ steps.extract-deployment-envs.outputs.AWS_CD_ROLE }}
          aws-region: ${{ steps.extract-deployment-envs.outputs.AWS_REGION }}
          
      - name: Check if it's initial deployment
        id: check-init-deploy
        run: |
          # shellcheck disable=SC2016
          INPUT_ENV_SUFFIX=${{ inputs.environment_suffix }}
          STACK_NAME_SUFFIX=""
          echo $INPUT_ENV_SUFFIX
          if [[ -n $INPUT_ENV_SUFFIX ]]; then
              STACK_NAME_SUFFIX="-${INPUT_ENV_SUFFIX}"
          fi
          STACK_NAME="${{ steps.extract-deployment-envs.outputs.ProductName }}${STACK_NAME_SUFFIX}"
          echo $STACK_NAME
          if aws cloudformation describe-stacks --stack-name $STACK_NAME; then
              echo "Deployment exists"
              echo "INITIAL_DEPLOYMENT=false" >> "$GITHUB_OUTPUT"
          else
              echo "This is an initial deployment"
              echo "INITIAL_DEPLOYMENT=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Construct Stack Name and Subdomain
        id: construct-stackname-subdomain
        run: |
          INPUT_ENV_SUFFIX=${{ inputs.environment_suffix }}
          STACK_NAME_SUFFIX=""
          if [[ -n $INPUT_ENV_SUFFIX ]]; then
              STACK_NAME_SUFFIX="-${INPUT_ENV_SUFFIX}"
          fi
          STACK_NAME="${{ steps.extract-deployment-envs.outputs.ProductName }}${STACK_NAME_SUFFIX}"
          SUBDOMAIN=$STACK_NAME
      
          echo "STACK_NAME=$STACK_NAME" >> "$GITHUB_OUTPUT"
          echo "Subdomain=$SUBDOMAIN" >> "$GITHUB_OUTPUT"

      - name: Combine CloudFormation Parameters
        id: combine-cf-parameters
        run: |
          # shellcheck disable=SC2016
          DYNAMIC_CF_PARAMETERS="${{ inputs.dynamic_cf_parameters }}"
          if [[ -z "$DYNAMIC_CF_PARAMETERS" ]]; then
            DYNAMIC_CF_PARAMETERS="{}"
          fi
          
          if echo "$DYNAMIC_CF_PARAMETERS" | jq -e 'has("InitialDeployment")' > /dev/null; then
            echo "init_deployment key exists."
          else
            INITIAL_DEPLOYMENT_FROM_ACTION="${{ steps.check-init-deploy.outputs.INITIAL_DEPLOYMENT }}"
            DYNAMIC_CF_PARAMETERS=$(echo "$DYNAMIC_CF_PARAMETERS" | jq --arg init_dep "$INITIAL_DEPLOYMENT_FROM_ACTION" '. + {"InitialDeployment": $init_dep}')
          fi
          
          #Filter out the Parameters parent key if it exists, combine with dynamic parameters and then produce SAM parameters
          jq '. | if has("Parameters") then .Parameters else . end' "${{ inputs.infra_folder_path }}/environments/${{ inputs.environment_id }}_cf_parameters.json" >> temp_cf_parameters.json
          echo "$DYNAMIC_CF_PARAMETERS" | jq '.' >> dynamic_cf_parameters.json
          SAM_PARAMETERS=$(jq '. + input' temp_cf_parameters.json dynamic_cf_parameters.json | jq -r 'to_entries | map(.key + "=" + .value) | join(" ")')
          #We construct the subdomain based on the stack name for consistency and predictability of domain names
          echo "SAM_PARAMETERS=$SAM_PARAMETERS Subdomain=${{ steps.construct-stackname-subdomain.outputs.STACK_NAME }} ProductName=${{ steps.extract-deployment-envs.outputs.ProductName }}" >> "$GITHUB_OUTPUT"

      - name: Build and Deploy SAM
        id: sam-deploy
        run: |
          #Echo for verification before deployment
          cat ${{ inputs.infra_folder_path }}/samconfig.toml
          echo ${{ steps.combine-cf-parameters.outputs.SAM_PARAMETERS }}

          sam build -t ${{ inputs.main_cf_template }}

          sam deploy \
          --config-file ${{ inputs.infra_folder_path }}/samconfig.toml \
          --config-env ${{ inputs.environment_id }} \
          --stack-name ${{ steps.construct-stackname-subdomain.outputs.STACK_NAME }} \
          --role-arn ${{ steps.extract-deployment-envs.outputs.AWS_CF_ROLE }} \
          --parameter-overrides ${{ steps.combine-cf-parameters.outputs.SAM_PARAMETERS }} \
          --no-fail-on-empty-changeset

