name: Deployment

on:
  workflow_call:
    inputs:
      python_version:
        required: false
        default: '3.10'
        type: string
      environment_id:
        required: true
        type: string
      environment_suffix:
        required: false
        type: string
      dynamic_cf_parameters:
        required: false
        type: string
      main_cf_template:
        required: false
        type: string

jobs:
  set-environment-variables:
    runs-on: ubuntu-latest
    outputs:
      stack-name: ${{ steps.construct-stackname.outputs.STACK_NAME }}
      github-env-name: ${{ steps.construct-stackname.outputs.STACK_NAME }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3

      - name: Extract Deployment Variables to Output
        id: extract-deployment-envs
        run: |
          set -o allexport
          
          if [ -f "infra/environments/common.env" ]; then
            source infra/environments/common.env
          else
            echo "No common.env file has been found. Disregarding it."
          fi
          source infra/environments/${{ inputs.environment_id }}.env
          
          if [[ -z $ProductName || -z $AWS_REGION || -z $AWS_ACCOUNT_ID || -z $AWS_ACCOUNT_NAME || -z $AWS_CD_ROLE || -z $AWS_CF_ROLE ]]; then
            echo -e "All necessary parameters must be defined, which are:\n- ProductName\n- AWS_REGION\n- AWS_ACCOUNT_ID\n- AWS_ACCOUNT_NAME\n- AWS_CD_ROLE\n- AWS_CF_ROLE"
            exit 1
          else
            echo "All necessary parameters are defined"
          fi
          
          echo "ProductName=$ProductName" >> $GITHUB_OUTPUT

      - name: Construct Stack Name
        id: construct-stackname
        run: |
          INPUT_ENV_SUFFIX=${{ inputs.environment_suffix }}
          if [[ -z $INPUT_ENV_SUFFIX ]]; then
            echo "STACK_NAME=${{ steps.extract-deployment-envs.outputs.ProductName }}" >> $GITHUB_OUTPUT
          else
            echo "STACK_NAME=${{ steps.extract-deployment-envs.outputs.ProductName }}-${{ inputs.environment_suffix }}" >> $GITHUB_OUTPUT
          fi
  
  deploy:
    runs-on: ubuntu-latest
    needs:
      - set-environment-variables
    environment: ${{ needs.set-environment-variables.outputs.github-env-name }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3

      - name: Set up Python "${{ inputs.python_version }}"
        id: python-setup
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.python_version }}"

      - name: Extract Deployment Variables to Output
        id: extract-deployment-envs
        run: |
          set -o allexport
          
          if [ -f "infra/environments/common.env" ]; then
            source infra/environments/common.env
          else
            echo "No common.env file has been found. Disregarding it."
          fi
          source infra/environments/${{ inputs.environment_id }}.env

          echo "ProductName=$ProductName" >> $GITHUB_OUTPUT
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_OUTPUT
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "AWS_ACCOUNT_NAME=$AWS_ACCOUNT_NAME" >> $GITHUB_OUTPUT
          echo "AWS_CD_ROLE=$AWS_CD_ROLE" >> $GITHUB_OUTPUT
          echo "AWS_CF_ROLE=$AWS_CF_ROLE" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ steps.extract-deployment-envs.outputs.AWS_CD_ROLE }}
          aws-region: ${{ steps.extract-deployment-envs.outputs.AWS_REGION }}

      - name: Combine CloudFormation Parameters
        id: combine-cf-parameters
        run: |
          DYNAMIC_CF_PARAMETERS='${{ inputs.dynamic_cf_parameters }}'
          if [[ -z $DYNAMIC_CF_PARAMETERS ]]; then
            #Filter out the Parameters parent key if it exists and then produce SAM parameters
            SAM_PARAMETERS=$( jq '. | if has("Parameters") then .Parameters else . end' infra/environments/${{ inputs.environment_id }}_cf_parameters.json | jq -r 'to_entries | map(.key + "=" + .value) | join(" ")')
            #We construct the subdomain based on the stack name for consistency and predictability of domain names
            echo "SAM_PARAMETERS=$SAM_PARAMETERS Subdomain=${{ needs.set-environment-variables.outputs.stack-name }} ProductName=${{ steps.extract-deployment-envs.outputs.ProductName }}" >> $GITHUB_OUTPUT
          else
            #Filter out the Parameters parent key if it exists, combine with dynamic parameters and then produce SAM parameters
            jq '. | if has("Parameters") then .Parameters else . end' infra/environments/${{ inputs.environment_id }}_cf_parameters.json >> temp_cf_parameters.json
            echo ${{ inputs.dynamic_cf_parameters }} | jq '.' >> dynamic_cf_parameters.json
            SAM_PARAMETERS=$( jq '. + input' temp_cf_parameters.json dynamic_cf_parameters.json | jq -r 'to_entries | map(.key + "=" + .value) | join(" ")')
            #We construct the subdomain based on the stack name for consistency and predictability of domain names
            echo "SAM_PARAMETERS=$SAM_PARAMETERS Subdomain=${{ needs.set-environment-variables.outputs.stack-name }} ProductName=${{ steps.extract-deployment-envs.outputs.ProductName }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and Deploy SAM
        id: sam-deploy
        run: |
          #Echo for verification before deployment
          cat infra/samconfig.toml
          echo ${{ steps.combine-cf-parameters.outputs.SAM_PARAMETERS }}

          MAIN_TEMPLATE='${{ inputs.main_cf_template }}'
          if [[ -z $MAIN_TEMPLATE ]]; then
            sam build -t infra/aws-deploy.yml
          else
            sam build -t ${{ inputs.main_cf_template }}
          fi

          sam deploy \
          --config-file infra/samconfig.toml \
          --config-env ${{ inputs.environment_id }} \
          --stack-name ${{ needs.set-environment-variables.outputs.stack-name }} \
          --role-arn ${{ steps.extract-deployment-envs.outputs.AWS_CF_ROLE }} \
          --parameter-overrides ${{ steps.combine-cf-parameters.outputs.SAM_PARAMETERS }} \
          --no-fail-on-empty-changeset
