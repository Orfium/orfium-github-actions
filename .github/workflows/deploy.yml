name: Deployment

on:
  workflow_call:
    inputs:
      python_version:
        required: false
        default: '3.10'
        type: string
      environment_id:
        required: true
        type: string
      environment_suffix:
        required: false
        type: string
      dynamic_cf_parameters:
        required: false
        type: string
      main_cf_template:
        required: false
        type: string
        default: infra/aws-deploy.yml
      infra_folder_path:
        required: false
        type: string
        default: infra

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Install toml-cli
        run: |
          export TOML_CLI_VERSION="0.2.3"
          bin_dir="$HOME/.local/bin"
          mkdir -p "$bin_dir"
          wget -q https://github.com/gnprice/toml-cli/releases/download/v"${TOML_CLI_VERSION}"/toml-"${TOML_CLI_VERSION}"-x86_64-linux.tar.gz -O "$bin_dir/toml"
          chmod +x "$bin_dir/toml"
          echo "$bin_dir" >> "$GITHUB_PATH"

      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Set up Python "${{ inputs.python_version }}"
        id: python-setup
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.python_version }}"

      - name: Extract Deployment Variables to Output
        id: extract-deployment-envs
        run: |
          set -o allexport

          if [ -f "${{ inputs.infra_folder_path }}/environments/common.env" ]; then
            source ${{ inputs.infra_folder_path }}/environments/common.env
          else
            echo "No common.env file has been found. Disregarding it."
          fi
          source ${{ inputs.infra_folder_path }}/environments/${{ inputs.environment_id }}.env

          if [[ -z $ProductName || -z $AWS_ACCOUNT_NAME || -z $AWS_ACCOUNT_ID ]]; then
            echo -e "All necessary parameters must be defined, which are:\n- AWS_ACCOUNT_ID\n- AWS_ACCOUNT_NAME\n"
            exit 1
          fi
          echo "All necessary parameters are defined"

          if [[ "$AWS_ACCOUNT_NAME" == "orfium-dev" && "$AWS_ACCOUNT_ID" == "102867326982" ]]; then
              AWS_REGION=${AWS_REGION:="us-east-1"}
              AWS_CD_ROLE=${AWS_CD_ROLE:="arn:aws:iam::102867326982:role/GithubDevCDRole"}
              AWS_CF_ROLE=${AWS_CF_ROLE:="arn:aws:iam::102867326982:role/OrfiumCloudFormationExecRole"}
              CAPABILITIES="CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND"
              S3_BUCKET="aws-sam-cli-managed-default-samclisourcebucket-d4fezbak9g6h"
          elif [[ "$AWS_ACCOUNT_NAME" == "orfium" && "$AWS_ACCOUNT_ID" == "198834624047" ]]; then
              AWS_REGION=${AWS_REGION:="us-east-1"}
              AWS_CD_ROLE=${AWS_CD_ROLE:="arn:aws:iam::198834624047:role/GithubProdCDRole"}
              AWS_CF_ROLE=${AWS_CF_ROLE:="arn:aws:iam::198834624047:role/OrfiumCloudFormationExecRole"}
              CAPABILITIES="CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND"
              S3_BUCKET="aws-sam-cli-managed-default-samclisourcebucket-1ts35wq336s6v"
          elif [[ "$AWS_ACCOUNT_NAME" == "orfium-data-dev" && "$AWS_ACCOUNT_ID" == "513905722774" ]]; then
              AWS_REGION=${AWS_REGION:="us-east-1"}
              AWS_CD_ROLE=${AWS_CD_ROLE:="arn:aws:iam::513905722774:role/GithubDataDevCDRole"}
              AWS_CF_ROLE=${AWS_CF_ROLE:="arn:aws:iam::513905722774:role/OrfiumCloudFormationExecRole"}
              CAPABILITIES="CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND"
              S3_BUCKET="aws-sam-cli-managed-default-samclisourcebucket-1r3wqzdobrh6u"
          elif [[ "$AWS_ACCOUNT_NAME" == "orfium-data" && "$AWS_ACCOUNT_ID" == "478610027546" ]]; then
              AWS_REGION=${AWS_REGION:="us-east-1"}
              AWS_CD_ROLE=${AWS_CD_ROLE:="arn:aws:iam::478610027546:role/GithubDataProdCDRole"}
              AWS_CF_ROLE=${AWS_CF_ROLE:="arn:aws:iam::478610027546:role/OrfiumCloudFormationExecRole"}
              CAPABILITIES="CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND"
              S3_BUCKET="aws-sam-cli-managed-default-samclisourcebucket-as73wh5cuzp6"
          else
              echo "Invalid AWS account id and name combination: AWS_ACCOUNT_NAME: $AWS_ACCOUNT_NAME, AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"
              exit 1
          fi

          # shellcheck disable=SC2129
          echo "ProductName=$ProductName" >> "$GITHUB_OUTPUT"
          echo "AWS_REGION=$AWS_REGION" >> "$GITHUB_OUTPUT"
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          echo "AWS_ACCOUNT_NAME=$AWS_ACCOUNT_NAME" >> "$GITHUB_OUTPUT"
          echo "AWS_CD_ROLE=$AWS_CD_ROLE" >> "$GITHUB_OUTPUT"
          echo "AWS_CF_ROLE=$AWS_CF_ROLE" >> "$GITHUB_OUTPUT"
          echo "CAPABILITIES=$CAPABILITIES" >> "$GITHUB_OUTPUT"
          echo "S3_BUCKET=$S3_BUCKET" >> "$GITHUB_OUTPUT"

      - name: Construct Stack Name and Subdomain
        id: construct-stackname-subdomain
        run: |
          INPUT_ENV_SUFFIX=${{ inputs.environment_suffix }}
          if [[ -z $INPUT_ENV_SUFFIX ]]; then
            echo "STACK_NAME=${{ steps.extract-deployment-envs.outputs.ProductName }}" >> "$GITHUB_OUTPUT"
            echo "Subdomain=${{ steps.extract-deployment-envs.outputs.ProductName }}" >> "$GITHUB_OUTPUT"
          else
            echo "STACK_NAME=${{ steps.extract-deployment-envs.outputs.ProductName }}-${{ inputs.environment_suffix }}" >> "$GITHUB_OUTPUT"
            echo "Subdomain=${{ steps.extract-deployment-envs.outputs.ProductName }}-${{ inputs.environment_suffix }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS Credentials
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.0.0
        with:
          role-to-assume: ${{ steps.extract-deployment-envs.outputs.AWS_CD_ROLE }}
          aws-region: ${{ steps.extract-deployment-envs.outputs.AWS_REGION }}

      - name: Combine CloudFormation Parameters
        id: combine-cf-parameters
        run: |
          DYNAMIC_CF_PARAMETERS='${{ inputs.dynamic_cf_parameters }}'
          if [[ -z $DYNAMIC_CF_PARAMETERS ]]; then
            #Filter out the Parameters parent key if it exists and then produce SAM parameters
            SAM_PARAMETERS=$( jq '. | if has("Parameters") then .Parameters else . end' ${{ inputs.infra_folder_path }}/environments/${{ inputs.environment_id }}_cf_parameters.json | jq -r 'to_entries | map(.key + "=" + .value) | join(" ")')
            #We construct the subdomain based on the stack name for consistency and predictability of domain names
            echo "SAM_PARAMETERS=$SAM_PARAMETERS Subdomain=${{ steps.construct-stackname-subdomain.outputs.STACK_NAME }} ProductName=${{ steps.extract-deployment-envs.outputs.ProductName }}" >> "$GITHUB_OUTPUT"
          else
            #Filter out the Parameters parent key if it exists, combine with dynamic parameters and then produce SAM parameters
            jq '. | if has("Parameters") then .Parameters else . end' ${{ inputs.infra_folder_path }}/environments/${{ inputs.environment_id }}_cf_parameters.json >> temp_cf_parameters.json
            echo ${{ inputs.dynamic_cf_parameters }} | jq '.' >> dynamic_cf_parameters.json
            SAM_PARAMETERS=$( jq '. + input' temp_cf_parameters.json dynamic_cf_parameters.json | jq -r 'to_entries | map(.key + "=" + .value) | join(" ")')
            #We construct the subdomain based on the stack name for consistency and predictability of domain names
            echo "SAM_PARAMETERS=$SAM_PARAMETERS Subdomain=${{ steps.construct-stackname-subdomain.outputs.STACK_NAME }} ProductName=${{ steps.extract-deployment-envs.outputs.ProductName }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and Deploy SAM
        id: sam-deploy
        run: |
          #Echo for verification before deployment
          cat ${{ inputs.infra_folder_path }}/samconfig.toml
          echo ${{ steps.combine-cf-parameters.outputs.SAM_PARAMETERS }}

          sam build -t ${{ inputs.main_cf_template }}

          region="$(toml get ${{ inputs.infra_folder_path}}/samconfig.toml ${{ inputs.environment_id }}.example.deploy.parameters.region || true)"
          capabilities="$(toml get ${{ inputs.infra_folder_path}}/samconfig.toml ${{ inputs.environment_id }}.example.deploy.parameters.capabilities || true)"
          s3_bucket="$(toml get ${{ inputs.infra_folder_path}}/samconfig.toml ${{ inputs.environment_id }}.example.deploy.parameters.s3_bucket || true)"

          sam deploy \
          --config-file ${{ inputs.infra_folder_path }}/samconfig.toml \
          --config-env ${{ inputs.environment_id }} \
          --stack-name ${{ steps.construct-stackname-subdomain.outputs.STACK_NAME }} \
          --role-arn ${{ steps.extract-deployment-envs.outputs.AWS_CF_ROLE }} \
          --parameter-overrides ${{ steps.combine-cf-parameters.outputs.SAM_PARAMETERS }} \
          --no-fail-on-empty-changeset \
          --region "${region:-${{ steps.extract-deployment-envs.outputs.AWS_REGION }}}" \
          --capabilities "${capabilities:-${{ steps.extract-deployment-envs.outputs.CAPABILITIES }}}" \
          --s3-bucket "${s3_bucket:-${{ steps.extract-deployment-envs.outputs.S3_BUCKET }}}"
