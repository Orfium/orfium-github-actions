on:
  workflow_call:
    inputs:
      environment_id:
        required: true
        type: string
      environment_suffix:
        required: false
        type: string
      infra_folder_path:
        required: false
        type: string
        default: infra
      codeartifact_encrypted_token_dev:
        required: false
        type: string
      codeartifact_encrypted_token_prod:
        required: false
        type: string
      docker_target:
        required: false
        type: string
        description: This is the target of the build.
        default: production
    outputs:
      ecr-image:
        description: "The application's image"
        value: ${{ jobs.build-and-push.outputs.ecr-image }}
    secrets:
      GPG_CODEARTIFACT_TOKEN_PASSPHRASE:
        required: false

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      ecr-image: ${{ steps.ecr-image-out.outputs.ECR_IMAGE }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Extract Deployment Variables to Output
        id: extract-deployment-envs
        run: |
          set -o allexport
          
          if [ -f "${{ inputs.infra_folder_path }}/environments/common.env" ]; then
            source ${{ inputs.infra_folder_path }}/environments/common.env
          else
            echo "No common.env file has been found. Disregarding it."
          fi
          source ${{ inputs.infra_folder_path }}/environments/${{ inputs.environment_id }}.env
          
          if [[ -z $ProductName || -z $AWS_REGION || -z $AWS_CD_ROLE || -z $ECR_REGISTRY ]]; then
            echo -e "All necessary parameters must be defined, which are:\n- ProductName\n- AWS_REGION\n- AWS_CD_ROLE\n- ECR_REGISTRY"
            exit 1
          else
            echo "All necessary parameters are defined"
          fi
          
          # shellcheck disable=SC2129
          echo "ProductName=$ProductName" >> "$GITHUB_OUTPUT"
          echo "AWS_REGION=$AWS_REGION" >> "$GITHUB_OUTPUT"
          echo "AWS_CD_ROLE=$AWS_CD_ROLE" >> "$GITHUB_OUTPUT"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> "$GITHUB_OUTPUT"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master

      - name: Configure AWS Credentials
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ steps.extract-deployment-envs.outputs.AWS_CD_ROLE }}
          aws-region: ${{ steps.extract-deployment-envs.outputs.AWS_REGION }}

      - name: Check and Create ECR Repository with Lifecycle Policy
        run: |
          # Extract repository name from ECR_REGISTRY (remove the AWS account and region prefix)
          REPOSITORY_NAME=$(echo "${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}" | awk -F'/' '{print $2}')
          echo "Checking if ECR repository $REPOSITORY_NAME exists..."
          
          # Check if repository exists
          if ! aws ecr describe-repositories --repository-names "$REPOSITORY_NAME" 2>/dev/null; then
            echo "ECR repository $REPOSITORY_NAME does not exist. Creating it..."
            aws ecr create-repository --repository-name "$REPOSITORY_NAME"
            echo "ECR repository created successfully."
          else
            echo "ECR repository $REPOSITORY_NAME already exists."
          fi
          
          # Check if the lifecycle policy already exists
          echo "Checking if lifecycle policy already exists..."
          EXISTING_POLICY=$(aws ecr get-lifecycle-policy --repository-name "$REPOSITORY_NAME" --output json 2>/dev/null || echo "")
          
          if [ -z "$EXISTING_POLICY" ]; then
            echo "No existing lifecycle policy found. Creating new policy..."
            # Set environment-specific lifecycle policy based on actual tagging pattern
            LIFECYCLE_POLICY='{
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Keep 50 latest untagged images for caching",
                  "selection": {
                    "tagStatus": "untagged",
                    "countType": "imageCountMoreThan",
                    "countNumber": 50
                  },
                  "action": {
                    "type": "expire"
                  }
                },
                {
                  "rulePriority": 2,
                  "description": "Keep all production, dev, stable and latest images",
                  "selection": {
                    "tagStatus": "tagged",
                    "tagPrefixList": ["production-", "dev", "stable", "latest"],
                    "countType": "imageCountMoreThan",
                    "countNumber": 999999
                  },
                  "action": {
                    "type": "expire"
                  }
                },
                {
                  "rulePriority": 3,
                  "description": "Keep 10 latest review and integration images",
                  "selection": {
                    "tagStatus": "tagged",
                    "tagPrefixList": ["review-", "integration-"],
                    "countType": "imageCountMoreThan",
                    "countNumber": 10
                  },
                  "action": {
                    "type": "expire"
                  }
                }
              ]
            }'
            
            aws ecr put-lifecycle-policy --repository-name "$REPOSITORY_NAME" --lifecycle-policy-text "$LIFECYCLE_POLICY"
            echo "Lifecycle policy set successfully."
          else
            echo "Lifecycle policy already exists. Skipping policy creation."
          fi

      - name: Clean up old images
        run: |
          # Extract repository name from ECR_REGISTRY (remove the AWS account and region prefix)
          REPOSITORY_NAME=$(echo "${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}" | awk -F'/' '{print $2}')
          echo "Cleaning up images in repository: $REPOSITORY_NAME"
          
          # Get all image details including tags
          echo "Fetching all images from repository..."
          IMAGES=$(aws ecr list-images --repository-name "$REPOSITORY_NAME" --output json)
          
          # Define valid patterns
          VALID_PATTERNS=("production-" "dev" "latest" "review-" "integration-" "stable")
          
          # Process each image
          echo "Processing images..."
          echo "$IMAGES" | jq -r '.imageDetails[] | select(.imageTags != null) | .imageTags[]' | while read -r tag; do
            echo "Checking tag: $tag"
            
            # Skip if tag is empty
            [ -z "$tag" ] && continue
            
            # Check if tag matches any valid pattern
            is_valid=false
            for pattern in "${VALID_PATTERNS[@]}"; do
              if [[ "$tag" == *"$pattern"* ]]; then
                is_valid=true
                echo "Tag '$tag' matches pattern '$pattern'"
                break
              fi
            done
            
            # If tag doesn't match any pattern, delete it
            if [ "$is_valid" = false ]; then
              echo "Deleting image with tag: $tag"
              aws ecr batch-delete-image --repository-name "$REPOSITORY_NAME" --image-ids "imageTag=$tag"
            fi
          done
          echo "Cleanup completed"

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}
      
      - name: Decrypt Codeartifact dev token
        if: "${{ inputs.codeartifact_encrypted_token_dev != '' }}"
        run: |
          token=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "${{ inputs.codeartifact_encrypted_token_dev }}" | base64 --decode))
          echo "::add-mask::$token"
          echo "CODEARTIFACT_TOKEN_DEV=$token" >> "$GITHUB_ENV"
          
      - name: Decrypt Codeartifact prod token
        if: "${{ inputs.codeartifact_encrypted_token_prod != '' }}"
        run: |
          token=$(gpg --decrypt --quiet --batch --passphrase "${{ secrets.GPG_CODEARTIFACT_TOKEN_PASSPHRASE }}" --output - <(echo "${{ inputs.codeartifact_encrypted_token_prod }}" | base64 --decode))
          echo "::add-mask::$token"
          echo "CODEARTIFACT_TOKEN_PROD=$token" >> "$GITHUB_ENV"

      - name: Build And Push Stable Docker Image
        uses: docker/build-push-action@v5
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        with:
          push: true
          tags: ${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}:${{ inputs.environment_id }}-${{ github.sha }}
          cache-from: ${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}:stable
          cache-to: type=registry,ref=${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}:stable,mode=max,image-manifest=true,oci-mediatypes=true
          target: ${{ inputs.docker_target }}
          secrets: |  # pragma: allowlist secret
            CODEARTIFACT_TOKEN_DEV=${{ env.CODEARTIFACT_TOKEN_DEV }}
            CODEARTIFACT_TOKEN_PROD=${{ env.CODEARTIFACT_TOKEN_PROD }}

      - name: Build And Push Latest Docker Image
        uses: docker/build-push-action@v5
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
        with:
          push: true
          tags: ${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}:${{ inputs.environment_id }}-${{ github.sha }}
          cache-from: ${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}:latest
          cache-to: type=registry,ref=${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}:latest,mode=max,image-manifest=true,oci-mediatypes=true
          target: ${{ inputs.docker_target }}
          secrets: |  # pragma: allowlist secret
            CODEARTIFACT_TOKEN_DEV=${{ env.CODEARTIFACT_TOKEN_DEV }}
            CODEARTIFACT_TOKEN_PROD=${{ env.CODEARTIFACT_TOKEN_PROD }}

      - name: Output ECR image
        id: ecr-image-out
        shell: bash
        run: |
          ECR_IMAGE=${{ steps.extract-deployment-envs.outputs.ECR_REGISTRY }}:${{ inputs.environment_id }}-${{ github.sha }}
          echo "ECR_IMAGE=$ECR_IMAGE" >> "$GITHUB_OUTPUT"
          echo "The ECR image arn is $ECR_IMAGE"

