name: Deploy Frontend

on:
  workflow_call:
    inputs:
      target-environment:
        description: Deployment Target
        required: true
        type: string
    secrets:
      ORG_PGP_TOKEN:
        description: Org token for npm
        required: true

jobs:
  get-environment-name:
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.get-env.outputs.env-name }}
      url: ${{ steps.get-env.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: get-env
        run: |
          set -o allexport
          # Load optional common configuration
          if [ -f environments/common.env ]; then
              source environments/common.env
          fi
          source environments/${{ inputs.target-environment }}.env

          SUBDOMAIN=$PRODUCT
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              SUBDOMAIN=${SUBDOMAIN}-pr-${{ github.event.pull_request.number }}
          fi
          ENV=${{ inputs.target-environment }}
          if [[ ${{ github.event_name }} == "pull_request" ]]; then
            ENV=review-${{ github.event.pull_request.number }}
          fi
          echo "::set-output name=env-name::$ENV"
          echo "::set-output name=url::https://${SUBDOMAIN}.${BASE_DOMAIN}"

  deploy-front-end:
    runs-on: ubuntu-latest
    needs:
      - get-environment-name
    environment:
      name: ${{ needs.get-environment-name.outputs.env-name }}
      url: ${{ needs.get-environment-name.outputs.url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup configuration
        id: config
        run: |
          # Set default Node Version
          NODE_VERSION=14.1

          set -o allexport
          # Load optional common configuration
          if [ -f environments/common.env ]; then
              source environments/common.env
          fi
          source environments/${{ inputs.target-environment }}.env

          SUBDOMAIN=$PRODUCT
          STACKNAME=${PRODUCT}-${{ inputs.target-environment }}
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              SUBDOMAIN=${SUBDOMAIN}-pr-${{ github.event.pull_request.number }}
              STACKNAME=${PRODUCT}-pr-${{ github.event.pull_request.number }}
          fi

          echo "::set-output name=version::$NODE_VERSION"
          echo "::set-output name=csp_header::$CSP_HEADER"
          echo "::set-output name=cd_role::$CD_ROLE"
          echo "::set-output name=cfn_role::$CFN_ROLE"
          echo "::set-output name=cert_arn::$CERT_ARN"
          echo "::set-output name=domain::$BASE_DOMAIN"
          echo "::set-output name=subdomain::$SUBDOMAIN"
          echo "::set-output name=product::$PRODUCT"
          echo "::set-output name=stackname::$STACKNAME"

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.config.outputs.version }}

      - name: Sets npm and yarn config
        run: |
          npm config set //npm.pkg.github.com/:_authToken ${{ secrets.ORG_PGP_TOKEN }}
          npm config set @orfium:registry https://npm.pkg.github.com
          npm config set always-auth true
          yarn config set @orfium:registry https://npm.pkg.github.com
          yarn config set registry https://npm.pkg.github.com

      - name: Setup env, install dependencies, and build app
        run: |
          # Load optional common configuration
          if [ -f environments/common.env ]; then
              source environments/common.env
          fi
          set -o allexport
          source environments/${{ inputs.target-environment }}.env
          yarn install
          yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ steps.config.outputs.cd_role }}
          aws-region: "us-east-1"

      - name: Check if deployment exists and is up to date
        id: check-stack-state
        run: |
          STACKNAME=${{ steps.config.outputs.stackname }}
          if aws cloudformation describe-stacks --stack-name $STACKNAME; then
            PARAMETER_CSP=$(aws cloudformation describe-stacks --stack-name $STACKNAME --query "Stacks[0].Parameters[?ParameterKey=='CSPHeaderValue'].ParameterValue" --output text)
            if [[ "$PARAMETER_CSP" == "${{ steps.config.outputs.csp_header }}" ]]; then
              echo "::set-output name=create_or_update_stack::0";
            else
              echo "::set-output name=create_or_update_stack::1";
            fi
          else
            echo "::set-output name=create_or_update_stack::1";
          fi

      - name: Set up S3-Cloudfront
        if: steps.check-stack-state.outputs.create_or_update_stack == '1'
        id: cloudfront-app-setup
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.4
        with:
          name: ${{ steps.config.outputs.stackname }}
          role-arn: ${{ steps.config.outputs.cfn_role }}
          template: >-
            https://orfium-cf-templates.s3.amazonaws.com/aws-cloudfront-s3-frontend.yml
          parameter-overrides: >-
            CSPHeaderValue=${{ steps.config.outputs.csp_header }},
            FeDomainName=${{ steps.config.outputs.subdomain }}.${{ steps.config.outputs.domain }},
            CreateDNSRecord=true,
            HostedZoneName=${{ steps.config.outputs.domain }},
            TLSCertificateArn=${{ steps.config.outputs.cert_arn }}
          no-fail-on-empty-changeset: "1"
          tags: >
            [
              {"Key": "info:creator", "Value": "github-actions"},
              {"Key": "info:maintainer", "Value": "devops.dpt"},
              {"Key": "info:product", "Value": "${{ steps.config.outputs.product }}"},
              {"Key": "info:env", "Value": "${{ inputs.target-environment }}"}
            ]

      - name: Upload to S3
        run: |
          STACKNAME=${{ steps.config.outputs.stackname }}
          S3_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name "$STACKNAME" --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' --output text)
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name "$STACKNAME" --query 'Stacks[0].Outputs[?OutputKey==`FeCloudFrontDistributionId`].OutputValue' --output text)
          aws s3 sync $GITHUB_WORKSPACE/build/ s3://${S3_BUCKET_NAME}/
          INVALIDATION_ID=`aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*" | jq -r .Invalidation.Id`
